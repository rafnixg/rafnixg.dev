{"componentChunkName":"component---src-templates-post-js","path":"/entornos-virtuales-en-python-usando-pipenv/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5f330dd9c6b819e6351398d2","title":"üêç Entornos virtuales en Python usando Pipenv","slug":"entornos-virtuales-en-python-usando-pipenv","featured":true,"feature_image":"https://images.unsplash.com/photo-1515879218367-8466d910aaa4?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Una peque√±a gu√≠a de como usar entornos virtuales de forma f√°cil en Python","custom_excerpt":"Una peque√±a gu√≠a de como usar entornos virtuales de forma f√°cil en Python","visibility":"public","created_at_pretty":"27 June, 2020","published_at_pretty":"12 May, 2019","updated_at_pretty":"22 July, 2020","created_at":"2020-06-27T00:02:48.000-05:00","published_at":"2019-05-11T19:39:00.000-05:00","updated_at":"2020-07-22T16:54:23.000-05:00","meta_title":"üêç Entornos virtuales en Python usando Pipenv","meta_description":"Una peque√±a gu√≠a de como usar entornos virtuales de forma f√°cil en Python","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Rafnix Guzm√°n","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Rafnix Guzm√°n","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"python","slug":"python","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"python","slug":"python","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Cuando iniciamos en el desarrollo con Python muchas veces no nos damos cuenta\ndel dolor de cabeza que es mantener varios proyectos con diferentes versiones de\ndependencias en nuestra entorno de desarrollo local, a medida que vamos\nevolucionando vamos adquiriendo nuevas herramientas que mejoren nuestro flujo de\ntrabajo, como el uso de entornos virtuales o manejadores de paquetes, entre\notras, Pipenv es una de estas herramientas que nos ayudan mucho a integrar y\nmejorar nuestros flujos en Python, tanto es as√≠ que su eslogan por as√≠ decirlo\nes \"Python Development Workflow for Humans\".\n\nEsta herramienta b√°sicamente nos ayuda a optimizar nuestro flujo de desarrollo\nunificando pip y virtualenv en una sola herramienta que funciona por linea de\ncomandos (Terminal), lo que nos daria un entorno aislado en el cual instalar\nnuestras dependencia y luego replicar este mismo entorno en otra maquina gracias\na el archivo que se genera Pipfile [https://github.com/pypa/pipfile], que viene\na ser el sustituto del archivo que genera pip requirements.txt\n\nInstalando Pipenv\nEl proceso de instalaci√≥n de Pipenv es muy sencillo, en esta ocasi√≥n voy a\ndetallar 2 formas de instalar usando lo indicado en la documentaci√≥n oficial\n[https://pipenv-es.readthedocs.io/es/latest/].\n\nSi estas usando Ubuntu 16.04:\n\n$ sudo apt install software-properties-common python-software-properties\n$ sudo add-apt-repository ppa:pypa/ppa\n$ sudo apt update\n$ sudo apt install pipenv\n\n\nEsta otra opci√≥n es por si ya tienes instalado pip:\n\n$ pip install pipenv\n\n\nComo acabamos de ver la instalaci√≥n es muy sencilla, de igual manera si tienen\nalg√∫n problema con la instalaci√≥n me pueden escribir.\n\nUsando Pipenv\nPara efectos de este ejemplo vamos a generar una aplicaci√≥n sencilla usando \nFlask y haremos el t√≠pico Hola Mundo, ya que este post no se trata de desarrollo\nde apps usando Flask\n\nPrimero creamos nuestro entorno virtual para aislar nuestra aplicaci√≥n:\n\n$ pipenv shell\n\nCreating a virtualenv for this project‚Ä¶\nPipfile: /home/usuario/nombre_del_proyecto/Pipfile\nUsing /usr/bin/python3 (3.6.7) to create virtualenv‚Ä¶\n\n\nCon la ejecuci√≥n de este comando se crea un entorno virtual si no existe, ademas\nde crear 2 archivos: Pipfile y Pipfile.lock.\n\nSi se instala en un proyecto preexistente Pipenv convierte tu archivo \nrequirements.txt en Pipfile.\n\nPara este proyecto se ha creado un entorno con una versi√≥n de python 3, si\nnecesitas instalar una versi√≥n de python 2 solo debes agregar el argumento\n--two, tambi√©n funciona para python 3 el argumento --three.\n\n$ pipenv shell --two    #Genera entorno en Python2\n$ pipenv shell --three  #Genera entorno en Python3\n\n\nAhora procedemos a instalar los paquetes que necesitamos, en nuestro caso Flask,\npero supondremos que necesitamos una versi√≥n especifica para este ejemplo\nusaremos la versi√≥n 1.0, para el momento de escribir este post la versi√≥n latest\nde Flask es la 1.0.2\n\n$ pipenv install flask==1.0\n\nInstalling flask==1.0‚Ä¶\nAdding flask to Pipfile's [packages]‚Ä¶\n‚úî Installation Succeeded \nPipfile.lock not found, creating‚Ä¶\nLocking [dev-packages] dependencies‚Ä¶\nLocking [packages] dependencies‚Ä¶\n‚úî Success! \nUpdated Pipfile.lock (db0e09)!\nInstalling dependencies from Pipfile.lock (db0e09)‚Ä¶\n  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 6/6 ‚Äî\n\n\nCon esto ya tendremos Flask instalado en nuestro entorno virtual, y procedemos a\nrealizar nuestro desarrollo.\n\nCrean un archivo llamado apps.py con este contenido dentro:\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\n\nPor ultimo iniciamos nuestro servidor Flask\n\n$ FLASK_APP=apps.py flask run\n\n * Serving Flask app \"apps.py\"\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n\nCon esto tendremos nuestro server Flask corriendo nuestro archivo apps.py.\n\nConsideraciones finales\nA lo largo de este post hemos visto como el flujo de trabajo se puede optimizar\ncon el uso de esta herramienta, ya que no debemos generar los entornos virtuales\npor separado usando algo como virtualenv con el que como yo muchas personas no\nhan estado conformes, tambi√©n hemos visto como instalar paquetes usando pipenv\ntan f√°cil como si us√°ramos pip, queda de parte de cada quien darle una probada a\nesta herramienta y ver si le ayuda a optimizar su flujo de desarrollo y mantener\nun poco m√°s homog√©neo los ambientes de desarrollo.\n\nSi deseas que siga publicando contenido sobre entornos virtuales, pip, o\nexplique m√°s a fondo los ficheros Pipfileo Pipfile.lock, que otros comandos\npuede ejecutar Pipenv, solo h√°zmelo saber en un comentario o a trav√©s de mi\ncuenta twitter @rafnixg [https://twitter.com/rafnixg]\n\nReferencias\nDocumentaci√≥n Pipenv [https://pipenv-es.readthedocs.io/es/latest/]","html":"<!--kg-card-begin: markdown--><p>Cuando iniciamos en el desarrollo con Python muchas veces no nos damos cuenta del dolor de cabeza que es mantener varios proyectos con diferentes versiones de dependencias en nuestra entorno de desarrollo local, a medida que vamos evolucionando vamos adquiriendo nuevas herramientas que mejoren nuestro flujo de trabajo, como el uso de entornos virtuales o manejadores de paquetes, entre otras, Pipenv es una de estas herramientas que nos ayudan mucho a integrar y mejorar nuestros flujos en Python, tanto es as√≠ que su eslogan por as√≠ decirlo es <em>&quot;Python Development Workflow for Humans&quot;</em>.</p>\n<p>Esta herramienta b√°sicamente nos ayuda a optimizar nuestro flujo de desarrollo unificando <em>pip</em> y <em>virtualenv</em> en una sola herramienta que funciona por linea de comandos <em>(Terminal)</em>, lo que nos daria un entorno aislado en el cual instalar nuestras dependencia y luego replicar este mismo entorno en otra maquina gracias a el archivo que se genera <strong><a href=\"https://github.com/pypa/pipfile\">Pipfile</a></strong>, que viene a ser el sustituto del archivo que genera pip  <strong>requirements.txt</strong></p>\n<h2 id=\"instalandopipenv\">Instalando Pipenv</h2>\n<p>El proceso de instalaci√≥n de Pipenv es muy sencillo, en esta ocasi√≥n voy a detallar 2 formas de instalar usando lo indicado en la <a href=\"https://pipenv-es.readthedocs.io/es/latest/\">documentaci√≥n oficial</a>.</p>\n<p>Si estas usando Ubuntu 16.04:</p>\n<pre><code class=\"language-bash\">$ sudo apt install software-properties-common python-software-properties\n$ sudo add-apt-repository ppa:pypa/ppa\n$ sudo apt update\n$ sudo apt install pipenv\n</code></pre>\n<p>Esta otra opci√≥n es por si ya tienes instalado pip:</p>\n<pre><code class=\"language-bash\">$ pip install pipenv\n</code></pre>\n<p>Como acabamos de ver la instalaci√≥n es muy sencilla, de igual manera si tienen alg√∫n problema con la instalaci√≥n me pueden escribir.</p>\n<h2 id=\"usandopipenv\">Usando Pipenv</h2>\n<p>Para efectos de este ejemplo vamos a generar una aplicaci√≥n sencilla usando <code>Flask</code> y haremos el t√≠pico <em>Hola Mundo</em>, ya que este post no se trata de desarrollo de apps usando <code>Flask</code></p>\n<p>Primero creamos nuestro entorno virtual para aislar nuestra aplicaci√≥n:</p>\n<pre><code class=\"language-bash\">$ pipenv shell\n\nCreating a virtualenv for this project‚Ä¶\nPipfile: /home/usuario/nombre_del_proyecto/Pipfile\nUsing /usr/bin/python3 (3.6.7) to create virtualenv‚Ä¶\n</code></pre>\n<p>Con la ejecuci√≥n de este comando se crea un entorno virtual si no existe, ademas de crear 2 archivos: <code>Pipfile</code> y <code>Pipfile.lock</code>.</p>\n<p>Si se instala en un proyecto preexistente Pipenv convierte tu archivo <em>requirements.txt</em> en <em>Pipfile</em>.</p>\n<p>Para este proyecto se ha creado un entorno con una versi√≥n de python 3, si necesitas instalar una versi√≥n de python 2 solo debes agregar el argumento --two, tambi√©n funciona para python 3 el argumento --three.</p>\n<pre><code class=\"language-bash\">$ pipenv shell --two    #Genera entorno en Python2\n$ pipenv shell --three  #Genera entorno en Python3\n</code></pre>\n<p>Ahora procedemos a instalar los paquetes que necesitamos, en nuestro caso Flask, pero supondremos que necesitamos una versi√≥n especifica para este ejemplo usaremos la versi√≥n 1.0, para el momento de escribir este post la versi√≥n latest de Flask es la 1.0.2</p>\n<pre><code class=\"language-bash\">$ pipenv install flask==1.0\n\nInstalling flask==1.0‚Ä¶\nAdding flask to Pipfile's [packages]‚Ä¶\n‚úî Installation Succeeded \nPipfile.lock not found, creating‚Ä¶\nLocking [dev-packages] dependencies‚Ä¶\nLocking [packages] dependencies‚Ä¶\n‚úî Success! \nUpdated Pipfile.lock (db0e09)!\nInstalling dependencies from Pipfile.lock (db0e09)‚Ä¶\n  üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 6/6 ‚Äî\n</code></pre>\n<p>Con esto ya tendremos Flask instalado en nuestro entorno virtual, y procedemos a realizar nuestro desarrollo.</p>\n<p>Crean un archivo llamado <code>apps.py</code> con este contenido dentro:</p>\n<pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n\n@app.route(&quot;/&quot;)\ndef hello():\n    return &quot;Hello World!&quot;\n</code></pre>\n<p>Por ultimo iniciamos nuestro servidor Flask</p>\n<pre><code class=\"language-bash\">$ FLASK_APP=apps.py flask run\n\n * Serving Flask app &quot;apps.py&quot;\n * Environment: production\n   WARNING: Do not use the development server in a production environment.\n   Use a production WSGI server instead.\n * Debug mode: off\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre>\n<p>Con esto tendremos nuestro server Flask corriendo nuestro archivo <code>apps.py</code>.</p>\n<h2 id=\"consideracionesfinales\">Consideraciones finales</h2>\n<p>A lo largo de este post hemos visto como el flujo de trabajo se puede optimizar con el uso de esta herramienta, ya que no debemos generar los entornos virtuales por separado usando algo como <code>virtualenv</code> con el que como yo muchas personas no han estado conformes, tambi√©n hemos visto como instalar paquetes usando pipenv tan f√°cil como si us√°ramos <code>pip</code>, queda de parte de cada quien darle una probada a esta herramienta y ver si le ayuda a optimizar su flujo de desarrollo y mantener un poco m√°s homog√©neo los ambientes de desarrollo.</p>\n<p>Si deseas que siga publicando contenido sobre entornos virtuales, pip, o explique m√°s a fondo los ficheros <code>Pipfile</code>o <code>Pipfile.lock</code>, que otros comandos puede ejecutar Pipenv, solo h√°zmelo saber en un comentario o a trav√©s de mi cuenta twitter <a href=\"https://twitter.com/rafnixg\">@rafnixg</a></p>\n<p><strong>Referencias</strong><br>\n<a href=\"https://pipenv-es.readthedocs.io/es/latest/\">Documentaci√≥n Pipenv</a></p>\n<!--kg-card-end: markdown-->","url":"http://localhost:2368/entornos-virtuales-en-python-usando-pipenv/","canonical_url":null,"uuid":"7cebd5af-d7b3-4d7b-a0e6-caec08adad81","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ef6d2f82f13451cfdfd928f","reading_time":3}},"pageContext":{"slug":"entornos-virtuales-en-python-usando-pipenv"}},"staticQueryHashes":["176528973","2358152166","2561578252","2731221146","4145280475"]}