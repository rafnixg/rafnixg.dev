{"componentChunkName":"component---src-templates-post-js","path":"/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5f330dd9c6b819e6351398d8","title":"Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 2","slug":"actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2","featured":true,"feature_image":"https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"En esta segunda parte, empezaremos a darle un poco de dinamismo a nuestro archivo README, para esto haremos uso de Python y 3 librerías que nos ayudaran a hacer este proceso mas sencillo.","custom_excerpt":"En esta segunda parte, empezaremos a darle un poco de dinamismo a nuestro archivo README, para esto haremos uso de Python y 3 librerías que nos ayudaran a hacer este proceso mas sencillo.","visibility":"public","created_at_pretty":"28 July, 2020","published_at_pretty":"29 July, 2020","updated_at_pretty":"09 August, 2020","created_at":"2020-07-28T14:17:13.000-05:00","published_at":"2020-07-29T14:24:33.000-05:00","updated_at":"2020-08-08T20:06:35.000-05:00","meta_title":null,"meta_description":"En esta segunda parte, empezaremos a darle un poco de dinamismo a nuestro archivo README, para esto haremos uso de Python 3","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Rafnix Guzmán","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Rafnix Guzmán","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"python","slug":"python","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"python","slug":"python","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"git","slug":"git","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"\n\nLa idea principal es poder generar un archivo README.md con una lista de los\núltimos 5 post de este Blog, pero en esencia este código con muy poco o hasta\nnula modificacion en algunos casos puede servir para otros servicios como dev.to\n[https://dev.to/], Medium [https://medium.com/] o WordPress.\n\nYa teniendo nuestro archivo README.md creado en el post Actualiza tu perfil de\nGitHub con README y Github Actions - Parte 1\n[/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/] , nos\nubicamos en la carpeta de nuestro proyecto y empezaremos creamos una copia de\nnuestro archivo pero con extensión .template, quedándonos algo como esto:\nREADME.md.template, este sera el archivo que usaremos como base para generar\nnuestro README.md\n\nLuego editamos la sección de \"Latest post (Spanish)\" sustituyendo nuestros post\nestáticos con este código en Jinja2, que nos ayuda a iterar sobre una lista de\npost.\n\n## Latest Posts (Spanish)\n\n{% for post in latest_post %}\n- [{{post.title}}]({{post.link}})\n{%  endfor %}\n\n\n\nEn esta plantilla indico que le voy a pasar latest_post y que debo recorrer sus\npost e imprimirlos dentro de un link en markdown.\n\nAhora necesitamos el endpoint a el que consultaremos para obtener nuestras lista\nde posts, para esto haré uso de las RSS [https://es.wikipedia.org/wiki/RSS] que\ntiene Ghost y con el siguiente servicio lo convertiré de XML a JSON\n\nRss to json online converter - rss2json.comFree online API to convert RSS to\nJSONrss2json [https://rss2json.com]Acá pudimos haberlo hecho de muchas maneras\ndistintas, se pudo haber usado la API ded Ghost y hacer la petición directa o se\npudo haber hecho el cambio de XML a JSON usando Python, mi idea era hacerlo lo\nmas simple posible, si tienes una idea mejor la espero en los comentarios o un\nPull Request, ya con esto aclarado podemos continuar xD.\n\nTeniendo nuestro endpoint listo procederemos a crear nuestro script en Python,\npor lo que primero debemos preparar, es nuestro entorno virtual que nos ayude a\naislar nuestras dependencias para este proyecto, podemos hacer uso de Pipenv del\ncual tengo un tutorial por acá (Entornos virtuales en python usando Pipenv\n[/entornos-virtuales-en-python-usando-pipenv/]), pero en este caso lo haremos de\nla siguiente manera ya que es la mas comun.\n\n$ python3 -m venv env\n$ source env/bin/activate\n$ touch app.py\n\n\nLo que creara una carpeta env en el root de nuestro proyecto, activara nuestro\nentorno virtual y crea nuestro archivo app.py\n\nPara poder usar nuestras librerías debemos instalarlas, en este caso haré uso de\nPIP que es nuestro gestor de paquetes en python y las librería a instalar son:\n\n * urllib3: Para realizar las consultas HTTP\n * json: para parsear la información recibida en la respuesta HTTP\n * jinja2: para renderizar nuestro archivo README con la potencia de esta\n   librería de plantillas\n\n$ pip install urllib3 json jinja2\n$ pip freeze > requirements.txt\n\n\nYa tenemos nuestras dependencias instaladas nuestras dependencias, así que\nprocederemos a crear nuestro script, quedándonos algo como esto:\n\nimport json\nimport urllib3\nfrom jinja2 import Environment, FileSystemLoader\n\n# Cantidad maxima de posts a mostrar\nMAX_POSTS = 5\n\n# Setup\nenv = Environment(loader=FileSystemLoader('.'))\nhttp = urllib3.PoolManager()\n\ndef get_latest_posts(max_posts=5):\n    r = http.request('GET', 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frafnixg.dev%2Frss%2F')\n    data = json.loads(r.data.decode('utf-8'))['items']\n    return data[0:max_posts]\n\ndef render_readme(data):\n    template = env.get_template('README.template')\n    render = template.render(**data)\n    with open(\"README.md\", \"w\") as f:\n        f.write(render)\n\ndef main():\n\n    latest_posts = get_latest_posts(MAX_POSTS)\n    data = {\n        'latest_post': latest_posts\n    }\n    render_readme(data)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\nLas primeras 3 lineas de nuestro código son básicamente la importación de las\nlibrerías y utilidades que vamos a usar, luego definimos una constante para el\nnumero máximo de post que vamos a escribir en nuestro archivo README.\n\nEl setup es donde indicamos a jinja en que fichero debe buscar los templates y\ncreamos una instancia que llamaremos http para nuestras consultas HTTP\n\nComo ven en la función get_latest_posts() es un simple petición GET a el\nenpoint, como parámetro le podemos limitar el numero de items que retornara\n\nEn la función render_readme() indicamos el archivo a usar como template,\ncargamos la data obtenida de los últimos post y lo renderizamos en nuestro\ntemplate para luego escribirlo en el archivo final README.md\n\nCon esto ya podemos correr nuestro script y ver como nos genera de forma\ndinámica nuestro archivo README.md\n\n$ ptyhon3 app.py\n\n\nNuestro script ya genere de forma dinámica nuestro archivo README.md, con este\nmismo enfoque se pueden agregar muchísimas mas funciones consultando a\ndiferentes servicios y editar desde el template como se va a renderizar esta\ninformación.\n\nEn la tercera y ultima parte veremos como automatizar la ejecución de nuestro\nscript y actualizar README.md en nuestro repositorio de GitHub, gracias a las\nGitHub Actions.\n\nGracias por leerme, los espero por twitter @rafnixg\n[https://twitter.com/rafnixg] y por mi GitHub rafnixg\n[https://github.com/rafnixg/rafnixg]\n\nSiguiente publicación de esta serie: Actualiza tu perfil de GitHub con README y\nGitHub Actions - Parte 3\n[/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/]","html":"<p></p><p>La idea principal es poder generar un archivo README.md con una lista de los últimos 5 post de este Blog, pero en esencia este código con muy poco o hasta nula modificacion en algunos casos puede servir para otros servicios como <a href=\"https://dev.to/\">dev.to</a>, <a href=\"https://medium.com/\">Medium</a> o WordPress.</p><p>Ya teniendo nuestro archivo README.md creado en el post <a href=\"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/\">Actualiza tu perfil de GitHub con README y Github Actions - Parte 1</a> , nos ubicamos en la carpeta de nuestro proyecto y empezaremos creamos una copia de nuestro archivo pero con extensión <strong>.template</strong>, quedándonos algo como esto: README.md.template, este sera el archivo que usaremos como base para generar nuestro README.md</p><p>Luego editamos la sección de \"Latest post (Spanish)\" sustituyendo nuestros post estáticos con este código en Jinja2, que nos ayuda a iterar sobre una lista de post.</p><pre><code class=\"language-jinja\">## Latest Posts (Spanish)\n\n{% for post in latest_post %}\n- [{{post.title}}]({{post.link}})\n{%  endfor %}\n\n</code></pre><p>En esta plantilla indico que le voy a pasar <em>latest_post</em> y que debo recorrer sus post e imprimirlos dentro de un link en markdown.</p><p>Ahora necesitamos el endpoint a el que consultaremos para obtener nuestras lista de posts, para esto haré uso de las <a href=\"https://es.wikipedia.org/wiki/RSS\">RSS</a> que tiene Ghost y con el siguiente servicio lo convertiré de XML a JSON</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://rss2json.com\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Rss to json online converter - rss2json.com</div><div class=\"kg-bookmark-description\">Free online API to convert RSS to JSON</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://rss2json.com/favicon.ico\"><span class=\"kg-bookmark-publisher\">rss2json</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://rss2json.com/rss2json_logo.png\"></div></a></figure><p>Acá pudimos haberlo hecho de muchas maneras distintas, se pudo haber usado la API ded Ghost y hacer la petición directa o se pudo haber hecho el cambio de XML a JSON usando Python, mi idea era hacerlo lo mas simple posible, si tienes una idea mejor la espero en los comentarios o un Pull Request, ya con esto aclarado podemos continuar xD.</p><p>Teniendo nuestro endpoint listo procederemos a crear nuestro script en Python, por lo que primero debemos preparar, es nuestro entorno virtual que nos ayude a aislar nuestras dependencias para este proyecto, podemos hacer uso de Pipenv del cual tengo un tutorial por acá (<a href=\"http://localhost:2368/entornos-virtuales-en-python-usando-pipenv/\">Entornos virtuales en python usando Pipenv</a>), pero en este caso lo haremos de la siguiente manera ya que es la mas comun.</p><pre><code class=\"language-bash\">$ python3 -m venv env\n$ source env/bin/activate\n$ touch app.py\n</code></pre><p>Lo que creara una carpeta <em>env</em> en el <em>root</em> de nuestro proyecto, activara nuestro entorno virtual y crea nuestro archivo <strong>app.py</strong></p><p>Para poder usar nuestras librerías debemos instalarlas, en este caso haré uso de PIP que es nuestro gestor de paquetes en python y las librería a instalar son:</p><ul><li><strong>urllib3</strong>: Para realizar las consultas HTTP</li><li><strong>json</strong>: para parsear la información recibida en la respuesta HTTP</li><li><strong>jinja2</strong>: para renderizar nuestro archivo README con la potencia de esta librería de plantillas</li></ul><pre><code class=\"language-bash\">$ pip install urllib3 json jinja2\n$ pip freeze &gt; requirements.txt\n</code></pre><p>Ya tenemos nuestras dependencias instaladas nuestras dependencias, así que procederemos a crear nuestro script, quedándonos algo como esto:</p><pre><code class=\"language-python\">import json\nimport urllib3\nfrom jinja2 import Environment, FileSystemLoader\n\n# Cantidad maxima de posts a mostrar\nMAX_POSTS = 5\n\n# Setup\nenv = Environment(loader=FileSystemLoader('.'))\nhttp = urllib3.PoolManager()\n\ndef get_latest_posts(max_posts=5):\n    r = http.request('GET', 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frafnixg.dev%2Frss%2F')\n    data = json.loads(r.data.decode('utf-8'))['items']\n    return data[0:max_posts]\n\ndef render_readme(data):\n    template = env.get_template('README.template')\n    render = template.render(**data)\n    with open(\"README.md\", \"w\") as f:\n        f.write(render)\n\ndef main():\n\n    latest_posts = get_latest_posts(MAX_POSTS)\n    data = {\n        'latest_post': latest_posts\n    }\n    render_readme(data)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre><p>Las primeras 3 lineas de nuestro código son básicamente la importación de las librerías y utilidades que vamos a usar, luego definimos una constante para el numero máximo de post que vamos a escribir en nuestro archivo README.</p><p>El setup es donde indicamos a jinja en que fichero debe buscar los templates y creamos una instancia que llamaremos http para nuestras consultas HTTP</p><p>Como ven en la función <em>get_latest_posts()</em> es un simple petición GET a el enpoint, como parámetro le podemos limitar el numero de items que retornara</p><p>En la función <em>render_readme() </em>indicamos el archivo a usar como template, cargamos la data obtenida de los últimos post y lo renderizamos en nuestro template para luego escribirlo en el archivo final README.md</p><p>Con esto ya podemos correr nuestro script y ver como nos genera de forma dinámica nuestro archivo README.md</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ ptyhon3 app.py\n</code></pre>\n<!--kg-card-end: markdown--><p>Nuestro script ya genere de forma dinámica nuestro archivo README.md, con este mismo enfoque se pueden agregar muchísimas mas funciones consultando a diferentes servicios y editar desde el template como se va a renderizar esta información.</p><p>En la tercera y ultima parte veremos como automatizar la ejecución de nuestro script y actualizar README.md en nuestro repositorio de GitHub, gracias a las GitHub Actions.</p><p>Gracias por leerme, los espero por twitter <a href=\"https://twitter.com/rafnixg\">@rafnixg</a> y por mi GitHub <a href=\"https://github.com/rafnixg/rafnixg\">rafnixg</a></p><p>Siguiente publicación de esta serie: <a href=\"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/\">Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3</a></p>","url":"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/","canonical_url":null,"uuid":"924c8656-d63b-4a15-9f9d-c1094f418d0f","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f2079b92f13451cfdfd94a8","reading_time":3}},"pageContext":{"slug":"actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2"}},"staticQueryHashes":["176528973","2358152166","2561578252","2731221146","4145280475"]}