{"componentChunkName":"component---src-templates-tag-js","path":"/tag/github-actions/","result":{"data":{"ghostTag":{"slug":"github-actions","name":"github actions","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5f330dd9c6b819e6351398d9","title":"Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3","slug":"actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3","featured":true,"feature_image":"https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"En este tercer y ultimo post crearemos nuestro propio Github Actions para automatizar la generación de nuestro archivo README","custom_excerpt":"En este tercer y ultimo post crearemos nuestro propio Github Actions para automatizar la generación de nuestro archivo README","visibility":"public","created_at_pretty":"02 August, 2020","published_at_pretty":"09 August, 2020","updated_at_pretty":"09 August, 2020","created_at":"2020-08-02T18:38:05.000-05:00","published_at":"2020-08-08T19:59:16.000-05:00","updated_at":"2020-08-08T20:01:22.000-05:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Rafnix Guzmán","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Rafnix Guzmán","slug":"rafnix","bio":null,"profile_image":"//www.gravatar.com/avatar/5fb1357b705cbfd44fbbe63c7395c57c?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"github","slug":"github","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"github","slug":"github","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"github actions","slug":"github-actions","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"python","slug":"python","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Si aun no has leído las otras dos partes te invito a que las revises:\n\n * Crear nuestro README en GitHub\n   [/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/]\n * Escribir un script en python para crear nuestro README dinámico\n   [/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/]\n\nEn esta tercera entrega vamos a automatizar mediante GitHub Actions la\ngeneración de nuestro archivo README.md ejecutando de forma programada nuestro\nscript de Python que creamos en la publicación anterior.\n\nGitHub Actions es una funcionalidad de GitHub que nos permite automatizar flujos\nde desarrollo directamente en nuestro repositorio de código, lo que nos da la\nventaja de poder crear nuestros propios flujos y trabajos a ejecutar.\n\nAl estar integrado con nuestro repositorio de código, tenemos la ventaja de\npoder crear nuestros flujos de trabajo de CI/CD, en esta publicación no\nprofundizaremos en este tipo de implementaciones, pero si haremos uso de GitGub\nActions para ejecutar nuestro propio flujo que consiste en ejecutar un script de\nPython y realizar un PUSH a nuestro repositorio de datos cuando exista un cambio\nen el archivo README.md.\n\nCreando nuestro primer GitHub Actions\nPara poder activar esta funcionalidad solo debemos crear un directorio en la\nraíz de nuestro proyecto llamado .github dentro de este directorio creamos otro\ndirectorio llamado workflows.\n\n$ mkdir .github\n$ cd .github\n$ mkdir workflows\n\n\nYa con esto podemos comenzara crear nuestro workflow usando un archivo YAML,\npara este caso mi archivo se va a llamar python-app.yml\n[https://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml] \npero puede tener el nombre que ustedes quieran.\n\nSi hacemos un push al repositorio y revisamos el tab de \"Actions\" veremos\nnuestro workflow y estará en un estado de falla ya que aun no hemos agregado\nningún trabajo ni los pasos a seguir.\n\n# Raíz del proyecto\n$ git add .github/workflows/python-app.yml\n$ git commit -m \"[ADD] new workflow for GitHub Actions\"\n$ git push origin master\n\n\nGitHub Actions tabPara editar nuestro archivo lo haremos directamente desde\nGitHub para aprovechar el auto completado y otras herramientas que tiene GitHub\npara la creación de Actions, al abrir nuestro archivo escribimos lo siguiente:\n\nEditor de GitHubAcá podemos ver del lado derecho un panel que nos puede ayudar a\nbuscar Actions creadas por la comunidad y también nos muestra la documentación\nde GitHub Actions.\n\nname: Python workflow  #  Nombre del workflow\non:  #  llave que indica que se realizara una acción sobre algun evento \n  schedule:  # El evento que ejecutara la acción\n    - cron: \"0 */6 * * *\"  # configuración del intervalo de ejecución\n\n\nPudimos haber hecho que esta acción se ejecutara con otros eventos como un push\no un pull request, pero de esto hablare en una siguiente publicación, para\nprofundizar les recomiendo estas dos lecturas:\n\nWorkflow syntax for GitHub Actions - GitHub DocsA workflow is a configurable\nautomated process made up of one or more jobs. You must create a YAML file to\ndefine your workflow configuration.GitHub Docs\n[https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule]\nEvents that trigger workflows - GitHub DocsYou can configure your workflows to\nrun when specific activity on GitHub happens, at a scheduled time, or when an\nevent outside of GitHub occurs.GitHub Docs\n[https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events]\nHasta este momento solo hemos indicado, el nombre de nuestro workflow y que sera\nuna acción que se ejecutara de forma programada cada 6 horas, pero aun no hemos\ndefinido el job y la secuencia de pasos que se van a ejecutar, para esto debemos\neditar nuestro archivo y nos debe quedar de la siguiente manera:\n\nname: Python workflow  #  Nombre del workflow\non:  #  llave que indica que se realizara una acción sobre algun evento \n  schedule:  # El evento que ejecutara la acción\n    - cron: \"0 */6 * * *\"  # configuración del intervalo de ejecución\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run script\n        run: |\n          python app.py\n          git config user.name rafnixg\n          git config user.email rafnixg@gmail.com\n          git add README.md\n          git diff --quiet && git diff --staged --quiet || git commit -m \"[BOT] Update README with latest info\"\n          git push origin master\n\nhttps://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml\nAl guardar los cambios en nuestro archivo tenemos ya definido un job de nombre \nbuild con el key run-on donde indicamos que el sistema operativo que va a correr\nes un ubuntu-latest, si han trabajado con este tipo de archivos YAML en docker,\nse les hará fácil comprender este archivo, sino no hay problema acá explico que\nhace nuestro archivo.\n\nDespués de la definición del jobs tenemos que definir los steps, que son esos\npasos que va a seguir nuestro job, aqui usamos dos actions que están disponibles\nen el marketplace, esta creo es una de las cosas mas interesantes de GitHub\nActions, ya que podemos crear actions y compartirlas con la comunidad para que\notras personas las puedan implementar, yo estaré usando en esta oportunidad\n\"action/checkout@v2\" que nos ayuda a configurar git en nuestro workspace y poder\ntener acceso desde el Workflow que estamos definiendo hacia nuestro repositorio\ny \"action/setup-python@v2\" que nos ayuda a configurar python en el workspace\npara poder correr nuestro script.\n\nLo siguiente sera actualizar pip e instalar las dependencias de nuestro script y\nejecutar nuestro script, ya en este punto tenemos nuestro archivo READM.md\nactualizado en nuestro workspace, solo nos resta crear un commit con este cambio\ny hacer push a nuestro repositorio.\n\nCon este push ya tenemos nuestro README.md actualizado en nuestro repositorio,\nahora cada 6 horas va a correr este Workflow en donde definimos un jobs que se\nencarga de correr nuestro script y hacer un commit cuando exista un cambio en el\narchivo README.md\n\nEn próximas publicaciones hablara un poco mas sobre las GitHubs Actions y de\ncomo crear nuestras propias actions y publicarlas para que puedan ser\nreutilizadas, si te gusto el contenido espero tu comentario.\n\nSígueme en twitter @rafnixg [https://twitter.com/rafnixg]\n\nReferencias\nFeatures • GitHub ActionsEasily build, package, release, update, and deploy\nyour\nproject in any language—on GitHub or any external system—without having to run\ncode yourself.GitHub [https://github.com/features/actions]GitHub Actions\nDocumentation - GitHub DocsAutomate, customize, and execute your software\ndevelopment workflows right in your repository with GitHub Actions. You can\ndiscover, create, and share actions to perform any job you’d like, including\nCI/CD, and combine actions in a completely customized workflow.GitHub Docs\n[https://docs.github.com/en/actions]Using Python with GitHub Actions - GitHub\nDocsYou can create a continuous integration (CI) workflow to build and test\nyour\nPython project.GitHub Docs\n[https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#requirements-file]","html":"<p>Si aun no has leído las otras dos partes te invito a que las revises:</p><ul><li><a href=\"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/\">Crear nuestro README en GitHub</a></li><li><a href=\"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/\">Escribir un script en python para crear nuestro README dinámico</a></li></ul><p>En esta tercera entrega vamos a automatizar mediante GitHub Actions la generación de nuestro archivo README.md ejecutando de forma programada nuestro script de Python que creamos en la publicación anterior.</p><p>GitHub Actions es una funcionalidad de GitHub que nos permite automatizar flujos de desarrollo directamente en nuestro repositorio de código, lo que nos da la ventaja de poder crear nuestros propios flujos y trabajos a ejecutar.</p><p>Al estar integrado con nuestro repositorio de código, tenemos la ventaja de poder crear nuestros flujos de trabajo de CI/CD, en esta publicación no profundizaremos en este tipo de implementaciones, pero si haremos uso de GitGub Actions para ejecutar nuestro propio flujo que consiste en ejecutar un script de Python y realizar un <strong>PUSH</strong> a nuestro repositorio de datos cuando exista un cambio en el archivo README.md.</p><h2 id=\"creando-nuestro-primer-github-actions\">Creando nuestro primer GitHub Actions</h2><p>Para poder activar esta funcionalidad solo debemos crear un directorio en la raíz de nuestro proyecto llamado <em>.github</em> dentro de este directorio creamos otro directorio llamado <em><strong>workflows</strong>.</em></p><pre><code class=\"language-bash\">$ mkdir .github\n$ cd .github\n$ mkdir workflows\n</code></pre><p>Ya con esto podemos comenzara crear nuestro <strong>workflow</strong> usando un archivo YAML, para este caso mi archivo se va a llamar <em><a href=\"https://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml\">python-app.yml</a></em> pero puede tener el nombre que ustedes quieran.</p><p>Si hacemos un push al repositorio y revisamos el tab de \"Actions\" veremos nuestro <strong>workflow</strong> y estará en un estado de falla ya que aun no hemos agregado ningún trabajo ni los pasos a seguir.</p><pre><code class=\"language-bash\"># Raíz del proyecto\n$ git add .github/workflows/python-app.yml\n$ git commit -m \"[ADD] new workflow for GitHub Actions\"\n$ git push origin master\n</code></pre><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://localhost:2368/content/images/2020/08/image.png\" class=\"kg-image\" alt srcset=\"http://localhost:2368/content/images/size/w600/2020/08/image.png 600w, http://localhost:2368/content/images/size/w1000/2020/08/image.png 1000w, http://localhost:2368/content/images/2020/08/image.png 1265w\" sizes=\"(min-width: 720px) 720px\"><figcaption>GitHub Actions tab</figcaption></figure><p>Para editar nuestro archivo lo haremos directamente desde GitHub para aprovechar el auto completado y otras herramientas que tiene GitHub para la creación de Actions, al abrir nuestro archivo escribimos lo siguiente:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://localhost:2368/content/images/2020/08/image-3.png\" class=\"kg-image\" alt srcset=\"http://localhost:2368/content/images/size/w600/2020/08/image-3.png 600w, http://localhost:2368/content/images/size/w1000/2020/08/image-3.png 1000w, http://localhost:2368/content/images/2020/08/image-3.png 1350w\" sizes=\"(min-width: 720px) 720px\"><figcaption>Editor de GitHub</figcaption></figure><p>Acá podemos ver del lado derecho un panel que nos puede ayudar a buscar Actions creadas por la comunidad y también nos muestra la documentación de GitHub Actions.</p><pre><code class=\"language-yaml\">name: Python workflow  #  Nombre del workflow\non:  #  llave que indica que se realizara una acción sobre algun evento \n  schedule:  # El evento que ejecutara la acción\n    - cron: \"0 */6 * * *\"  # configuración del intervalo de ejecución\n</code></pre><p>Pudimos haber hecho que esta acción se ejecutara con otros eventos como un push o un pull request, pero de esto hablare en una siguiente publicación, para profundizar les recomiendo estas dos lecturas:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Workflow syntax for GitHub Actions - GitHub Docs</div><div class=\"kg-bookmark-description\">A workflow is a configurable automated process made up of one or more jobs. You must create a YAML file to define your workflow configuration.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.github.com/assets/images/site/favicon.ico\"><span class=\"kg-bookmark-publisher\">GitHub Docs</span></div></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Events that trigger workflows - GitHub Docs</div><div class=\"kg-bookmark-description\">You can configure your workflows to run when specific activity on GitHub happens, at a scheduled time, or when an event outside of GitHub occurs.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.github.com/assets/images/site/favicon.ico\"><span class=\"kg-bookmark-publisher\">GitHub Docs</span></div></div></a></figure><p>Hasta este momento solo hemos indicado, el nombre de nuestro <strong>workflow</strong> y que sera una acción que se ejecutara de forma programada cada 6 horas, pero aun no hemos definido el <strong>job</strong> y la secuencia de pasos que se van a ejecutar, para esto debemos editar nuestro archivo y nos debe quedar de la siguiente manera:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-yaml\">name: Python workflow  #  Nombre del workflow\non:  #  llave que indica que se realizara una acción sobre algun evento \n  schedule:  # El evento que ejecutara la acción\n    - cron: \"0 */6 * * *\"  # configuración del intervalo de ejecución\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run script\n        run: |\n          python app.py\n          git config user.name rafnixg\n          git config user.email rafnixg@gmail.com\n          git add README.md\n          git diff --quiet &amp;&amp; git diff --staged --quiet || git commit -m \"[BOT] Update README with latest info\"\n          git push origin master</code></pre><figcaption>https://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml</figcaption></figure><p>Al guardar los cambios en nuestro archivo tenemos ya definido un <strong>job</strong> de nombre <strong><em>build</em></strong><em> </em>con el key <strong><em>run-on</em></strong><em> </em>donde indicamos que el sistema operativo que va a correr es un ubuntu-latest, si han trabajado con este tipo de archivos YAML en docker, se les hará fácil comprender este archivo, sino no hay problema acá explico que hace nuestro archivo.</p><p>Después de la definición del jobs tenemos que definir los <strong>steps,</strong> que son esos pasos que va a seguir nuestro job, aqui usamos dos actions que están disponibles en el marketplace, esta creo es una de las cosas mas interesantes de GitHub Actions, ya que podemos crear actions y compartirlas con la comunidad para que otras personas las puedan implementar, yo estaré usando en esta oportunidad \"action/checkout@v2\" que nos ayuda a configurar git en nuestro <strong>workspace</strong> y poder tener acceso desde el <strong>Workflow</strong> que estamos definiendo hacia nuestro repositorio y \"action/setup-python@v2\" que nos ayuda a configurar python en el workspace para poder correr nuestro script.</p><p>Lo siguiente sera actualizar pip e instalar las dependencias de nuestro script y ejecutar nuestro script, ya en este punto tenemos nuestro archivo READM.md actualizado en nuestro <strong>workspace</strong>, solo nos resta crear un commit con este cambio y hacer push a nuestro repositorio.</p><p>Con este push ya tenemos nuestro README.md actualizado en nuestro repositorio, ahora cada 6 horas va a correr este Workflow en donde definimos un jobs que se encarga de correr nuestro script y hacer un commit cuando exista un cambio en el archivo README.md</p><p>En próximas publicaciones hablara un poco mas sobre las GitHubs Actions y de como crear nuestras propias actions y publicarlas para que puedan ser reutilizadas, si te gusto el contenido espero tu comentario.</p><p>Sígueme en twitter <a href=\"https://twitter.com/rafnixg\">@rafnixg</a></p><h2 id=\"referencias\">Referencias</h2><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/features/actions\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Features • GitHub Actions</div><div class=\"kg-bookmark-description\">Easily build, package, release, update, and deploy your project in any language—on GitHub or any external system—without having to run code yourself.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-publisher\">GitHub</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://github.githubassets.com/images/modules/site/social-cards/actions.png\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.github.com/en/actions\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub Actions Documentation - GitHub Docs</div><div class=\"kg-bookmark-description\">Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you’d like, including CI/CD, and combine actions in a completely customized workflow.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.github.com/assets/images/site/favicon.ico\"><span class=\"kg-bookmark-publisher\">GitHub Docs</span></div></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#requirements-file\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Using Python with GitHub Actions - GitHub Docs</div><div class=\"kg-bookmark-description\">You can create a continuous integration (CI) workflow to build and test your Python project.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.github.com/assets/images/site/favicon.ico\"><span class=\"kg-bookmark-publisher\">GitHub Docs</span></div></div></a></figure>","url":"http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/","canonical_url":null,"uuid":"4bdac536-735c-4918-b598-dbcdcc1732c2","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f274e5d514f905c523ba875","reading_time":5}}]}},"pageContext":{"slug":"github-actions","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}},"staticQueryHashes":["176528973","2358152166","2561578252","2731221146","4145280475"]}