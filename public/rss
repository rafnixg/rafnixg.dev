<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Rafnix Guzmán]]></title><description><![CDATA[No Description]]></description><link>https://rafnixg.dev/</link><image><url>https://rafnixg.dev/favicon.png</url><title>Rafnix Guzmán</title><link>https://rafnixg.dev/</link></image><generator>Ghost 2.9</generator><lastBuildDate>Tue, 11 Aug 2020 23:57:30 GMT</lastBuildDate><atom:link href="https://rafnixg.dev/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3]]></title><description><![CDATA[En este tercer y ultimo post crearemos nuestro propio Github Actions para automatizar la generación de nuestro archivo README]]></description><link>https://rafnixg.dev/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d9</guid><category><![CDATA[github]]></category><category><![CDATA[github actions]]></category><category><![CDATA[python]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Sun, 09 Aug 2020 00:59:16 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"/><p>Si aun no has leído las otras dos partes te invito a que las revises:</p><ul><li><a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/">Crear nuestro README en GitHub</a></li><li><a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/">Escribir un script en python para crear nuestro README dinámico</a></li></ul><p>En esta tercera entrega vamos a automatizar mediante GitHub Actions la generación de nuestro archivo README.md ejecutando de forma programada nuestro script de Python que creamos en la publicación anterior.</p><p>GitHub Actions es una funcionalidad de GitHub que nos permite automatizar flujos de desarrollo directamente en nuestro repositorio de código, lo que nos da la ventaja de poder crear nuestros propios flujos y trabajos a ejecutar.</p><p>Al estar integrado con nuestro repositorio de código, tenemos la ventaja de poder crear nuestros flujos de trabajo de CI/CD, en esta publicación no profundizaremos en este tipo de implementaciones, pero si haremos uso de GitGub Actions para ejecutar nuestro propio flujo que consiste en ejecutar un script de Python y realizar un <strong>PUSH</strong> a nuestro repositorio de datos cuando exista un cambio en el archivo README.md.</p><h2 id="creando-nuestro-primer-github-actions">Creando nuestro primer GitHub Actions</h2><p>Para poder activar esta funcionalidad solo debemos crear un directorio en la raíz de nuestro proyecto llamado <em>.github</em> dentro de este directorio creamos otro directorio llamado <em><strong>workflows</strong>.</em></p><pre><code class="language-bash">$ mkdir .github
$ cd .github
$ mkdir workflows
</code></pre><p>Ya con esto podemos comenzara crear nuestro <strong>workflow</strong> usando un archivo YAML, para este caso mi archivo se va a llamar <em><a href="https://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml">python-app.yml</a></em> pero puede tener el nombre que ustedes quieran.</p><p>Si hacemos un push al repositorio y revisamos el tab de "Actions" veremos nuestro <strong>workflow</strong> y estará en un estado de falla ya que aun no hemos agregado ningún trabajo ni los pasos a seguir.</p><pre><code class="language-bash"># Raíz del proyecto
$ git add .github/workflows/python-app.yml
$ git commit -m "[ADD] new workflow for GitHub Actions"
$ git push origin master
</code></pre><figure class="kg-card kg-image-card kg-card-hascaption"><img src="http://localhost:2368/content/images/2020/08/image.png" class="kg-image" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3" srcset="http://localhost:2368/content/images/size/w600/2020/08/image.png 600w, http://localhost:2368/content/images/size/w1000/2020/08/image.png 1000w, http://localhost:2368/content/images/2020/08/image.png 1265w" sizes="(min-width: 720px) 720px"><figcaption>GitHub Actions tab</figcaption></img></figure><p>Para editar nuestro archivo lo haremos directamente desde GitHub para aprovechar el auto completado y otras herramientas que tiene GitHub para la creación de Actions, al abrir nuestro archivo escribimos lo siguiente:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="http://localhost:2368/content/images/2020/08/image-3.png" class="kg-image" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3" srcset="http://localhost:2368/content/images/size/w600/2020/08/image-3.png 600w, http://localhost:2368/content/images/size/w1000/2020/08/image-3.png 1000w, http://localhost:2368/content/images/2020/08/image-3.png 1350w" sizes="(min-width: 720px) 720px"><figcaption>Editor de GitHub</figcaption></img></figure><p>Acá podemos ver del lado derecho un panel que nos puede ayudar a buscar Actions creadas por la comunidad y también nos muestra la documentación de GitHub Actions.</p><pre><code class="language-yaml">name: Python workflow  #  Nombre del workflow
on:  #  llave que indica que se realizara una acción sobre algun evento 
  schedule:  # El evento que ejecutara la acción
    - cron: "0 */6 * * *"  # configuración del intervalo de ejecución
</code></pre><p>Pudimos haber hecho que esta acción se ejecutara con otros eventos como un push o un pull request, pero de esto hablare en una siguiente publicación, para profundizar les recomiendo estas dos lecturas:</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Workflow syntax for GitHub Actions - GitHub Docs</div><div class="kg-bookmark-description">A workflow is a configurable automated process made up of one or more jobs. You must create a YAML file to define your workflow configuration.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://docs.github.com/assets/images/site/favicon.ico" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"><span class="kg-bookmark-publisher">GitHub Docs</span></img></div></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Events that trigger workflows - GitHub Docs</div><div class="kg-bookmark-description">You can configure your workflows to run when specific activity on GitHub happens, at a scheduled time, or when an event outside of GitHub occurs.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://docs.github.com/assets/images/site/favicon.ico" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"><span class="kg-bookmark-publisher">GitHub Docs</span></img></div></div></a></figure><p>Hasta este momento solo hemos indicado, el nombre de nuestro <strong>workflow</strong> y que sera una acción que se ejecutara de forma programada cada 6 horas, pero aun no hemos definido el <strong>job</strong> y la secuencia de pasos que se van a ejecutar, para esto debemos editar nuestro archivo y nos debe quedar de la siguiente manera:</p><figure class="kg-card kg-code-card"><pre><code class="language-yaml">name: Python workflow  #  Nombre del workflow
on:  #  llave que indica que se realizara una acción sobre algun evento 
  schedule:  # El evento que ejecutara la acción
    - cron: "0 */6 * * *"  # configuración del intervalo de ejecución

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run script
        run: |
          python app.py
          git config user.name rafnixg
          git config user.email rafnixg@gmail.com
          git add README.md
          git diff --quiet &amp;&amp; git diff --staged --quiet || git commit -m "[BOT] Update README with latest info"
          git push origin master</code></pre><figcaption>https://github.com/rafnixg/rafnixg/blob/master/.github/workflows/python-app.yml</figcaption></figure><p>Al guardar los cambios en nuestro archivo tenemos ya definido un <strong>job</strong> de nombre <strong><em>build</em></strong><em> </em>con el key <strong><em>run-on</em></strong><em> </em>donde indicamos que el sistema operativo que va a correr es un ubuntu-latest, si han trabajado con este tipo de archivos YAML en docker, se les hará fácil comprender este archivo, sino no hay problema acá explico que hace nuestro archivo.</p><p>Después de la definición del jobs tenemos que definir los <strong>steps,</strong> que son esos pasos que va a seguir nuestro job, aqui usamos dos actions que están disponibles en el marketplace, esta creo es una de las cosas mas interesantes de GitHub Actions, ya que podemos crear actions y compartirlas con la comunidad para que otras personas las puedan implementar, yo estaré usando en esta oportunidad "action/checkout@v2" que nos ayuda a configurar git en nuestro <strong>workspace</strong> y poder tener acceso desde el <strong>Workflow</strong> que estamos definiendo hacia nuestro repositorio y "action/setup-python@v2" que nos ayuda a configurar python en el workspace para poder correr nuestro script.</p><p>Lo siguiente sera actualizar pip e instalar las dependencias de nuestro script y ejecutar nuestro script, ya en este punto tenemos nuestro archivo READM.md actualizado en nuestro <strong>workspace</strong>, solo nos resta crear un commit con este cambio y hacer push a nuestro repositorio.</p><p>Con este push ya tenemos nuestro README.md actualizado en nuestro repositorio, ahora cada 6 horas va a correr este Workflow en donde definimos un jobs que se encarga de correr nuestro script y hacer un commit cuando exista un cambio en el archivo README.md</p><p>En próximas publicaciones hablara un poco mas sobre las GitHubs Actions y de como crear nuestras propias actions y publicarlas para que puedan ser reutilizadas, si te gusto el contenido espero tu comentario.</p><p>Sígueme en twitter <a href="https://twitter.com/rafnixg">@rafnixg</a></p><h2 id="referencias">Referencias</h2><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/features/actions"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Features • GitHub Actions</div><div class="kg-bookmark-description">Easily build, package, release, update, and deploy your project in any language—on GitHub or any external system—without having to run code yourself.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.githubassets.com/favicons/favicon.svg" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"><span class="kg-bookmark-publisher">GitHub</span></img></div></div><div class="kg-bookmark-thumbnail"><img src="https://github.githubassets.com/images/modules/site/social-cards/actions.png" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"/></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://docs.github.com/en/actions"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub Actions Documentation - GitHub Docs</div><div class="kg-bookmark-description">Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you’d like, including CI/CD, and combine actions in a completely customized workflow.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://docs.github.com/assets/images/site/favicon.ico" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"><span class="kg-bookmark-publisher">GitHub Docs</span></img></div></div></a></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#requirements-file"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Using Python with GitHub Actions - GitHub Docs</div><div class="kg-bookmark-description">You can create a continuous integration (CI) workflow to build and test your Python project.</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://docs.github.com/assets/images/site/favicon.ico" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3"><span class="kg-bookmark-publisher">GitHub Docs</span></img></div></div></a></figure>]]></content:encoded></item><item><title><![CDATA[Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 2]]></title><description><![CDATA[En esta segunda parte, empezaremos a darle un poco de dinamismo a nuestro archivo README, para esto haremos uso de Python y 3 librerías que nos ayudaran a hacer este proceso mas sencillo.]]></description><link>https://rafnixg.dev/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d8</guid><category><![CDATA[python]]></category><category><![CDATA[git]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Wed, 29 Jul 2020 19:24:33 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 2"/><p/><p>La idea principal es poder generar un archivo README.md con una lista de los últimos 5 post de este Blog, pero en esencia este código con muy poco o hasta nula modificacion en algunos casos puede servir para otros servicios como <a href="https://dev.to/">dev.to</a>, <a href="https://medium.com/">Medium</a> o WordPress.</p><p>Ya teniendo nuestro archivo README.md creado en el post <a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/">Actualiza tu perfil de GitHub con README y Github Actions - Parte 1</a> , nos ubicamos en la carpeta de nuestro proyecto y empezaremos creamos una copia de nuestro archivo pero con extensión <strong>.template</strong>, quedándonos algo como esto: README.md.template, este sera el archivo que usaremos como base para generar nuestro README.md</p><p>Luego editamos la sección de "Latest post (Spanish)" sustituyendo nuestros post estáticos con este código en Jinja2, que nos ayuda a iterar sobre una lista de post.</p><pre><code class="language-jinja">## Latest Posts (Spanish)

{% for post in latest_post %}
- [{{post.title}}]({{post.link}})
{%  endfor %}

</code></pre><p>En esta plantilla indico que le voy a pasar <em>latest_post</em> y que debo recorrer sus post e imprimirlos dentro de un link en markdown.</p><p>Ahora necesitamos el endpoint a el que consultaremos para obtener nuestras lista de posts, para esto haré uso de las <a href="https://es.wikipedia.org/wiki/RSS">RSS</a> que tiene Ghost y con el siguiente servicio lo convertiré de XML a JSON</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://rss2json.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">Rss to json online converter - rss2json.com</div><div class="kg-bookmark-description">Free online API to convert RSS to JSON</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://rss2json.com/favicon.ico" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 2"><span class="kg-bookmark-publisher">rss2json</span></img></div></div><div class="kg-bookmark-thumbnail"><img src="https://rss2json.com/rss2json_logo.png" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 2"/></div></a></figure><p>Acá pudimos haberlo hecho de muchas maneras distintas, se pudo haber usado la API ded Ghost y hacer la petición directa o se pudo haber hecho el cambio de XML a JSON usando Python, mi idea era hacerlo lo mas simple posible, si tienes una idea mejor la espero en los comentarios o un Pull Request, ya con esto aclarado podemos continuar xD.</p><p>Teniendo nuestro endpoint listo procederemos a crear nuestro script en Python, por lo que primero debemos preparar, es nuestro entorno virtual que nos ayude a aislar nuestras dependencias para este proyecto, podemos hacer uso de Pipenv del cual tengo un tutorial por acá (<a href="http://localhost:2368/entornos-virtuales-en-python-usando-pipenv/">Entornos virtuales en python usando Pipenv</a>), pero en este caso lo haremos de la siguiente manera ya que es la mas comun.</p><pre><code class="language-bash">$ python3 -m venv env
$ source env/bin/activate
$ touch app.py
</code></pre><p>Lo que creara una carpeta <em>env</em> en el <em>root</em> de nuestro proyecto, activara nuestro entorno virtual y crea nuestro archivo <strong>app.py</strong></p><p>Para poder usar nuestras librerías debemos instalarlas, en este caso haré uso de PIP que es nuestro gestor de paquetes en python y las librería a instalar son:</p><ul><li><strong>urllib3</strong>: Para realizar las consultas HTTP</li><li><strong>json</strong>: para parsear la información recibida en la respuesta HTTP</li><li><strong>jinja2</strong>: para renderizar nuestro archivo README con la potencia de esta librería de plantillas</li></ul><pre><code class="language-bash">$ pip install urllib3 json jinja2
$ pip freeze &gt; requirements.txt
</code></pre><p>Ya tenemos nuestras dependencias instaladas nuestras dependencias, así que procederemos a crear nuestro script, quedándonos algo como esto:</p><pre><code class="language-python">import json
import urllib3
from jinja2 import Environment, FileSystemLoader

# Cantidad maxima de posts a mostrar
MAX_POSTS = 5

# Setup
env = Environment(loader=FileSystemLoader('.'))
http = urllib3.PoolManager()

def get_latest_posts(max_posts=5):
    r = http.request('GET', 'https://api.rss2json.com/v1/api.json?rss_url=https%3A%2F%2Frafnixg.dev%2Frss%2F')
    data = json.loads(r.data.decode('utf-8'))['items']
    return data[0:max_posts]

def render_readme(data):
    template = env.get_template('README.template')
    render = template.render(**data)
    with open("README.md", "w") as f:
        f.write(render)

def main():

    latest_posts = get_latest_posts(MAX_POSTS)
    data = {
        'latest_post': latest_posts
    }
    render_readme(data)


if __name__ == "__main__":
    main()
</code></pre><p>Las primeras 3 lineas de nuestro código son básicamente la importación de las librerías y utilidades que vamos a usar, luego definimos una constante para el numero máximo de post que vamos a escribir en nuestro archivo README.</p><p>El setup es donde indicamos a jinja en que fichero debe buscar los templates y creamos una instancia que llamaremos http para nuestras consultas HTTP</p><p>Como ven en la función <em>get_latest_posts()</em> es un simple petición GET a el enpoint, como parámetro le podemos limitar el numero de items que retornara</p><p>En la función <em>render_readme() </em>indicamos el archivo a usar como template, cargamos la data obtenida de los últimos post y lo renderizamos en nuestro template para luego escribirlo en el archivo final README.md</p><p>Con esto ya podemos correr nuestro script y ver como nos genera de forma dinámica nuestro archivo README.md</p><!--kg-card-begin: markdown--><pre><code class="language-bash">$ ptyhon3 app.py
</code></pre>
<!--kg-card-end: markdown--><p>Nuestro script ya genere de forma dinámica nuestro archivo README.md, con este mismo enfoque se pueden agregar muchísimas mas funciones consultando a diferentes servicios y editar desde el template como se va a renderizar esta información.</p><p>En la tercera y ultima parte veremos como automatizar la ejecución de nuestro script y actualizar README.md en nuestro repositorio de GitHub, gracias a las GitHub Actions.</p><p>Gracias por leerme, los espero por twitter <a href="https://twitter.com/rafnixg">@rafnixg</a> y por mi GitHub <a href="https://github.com/rafnixg/rafnixg">rafnixg</a></p><p>Siguiente publicación de esta serie: <a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/">Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 3</a></p>]]></content:encoded></item><item><title><![CDATA[Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 1]]></title><description><![CDATA[Github ha lanzado una nueva funcionalidad para nuestro perfil de usuario, acá te enseño como publique y automatice el mio!]]></description><link>https://rafnixg.dev/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d7</guid><category><![CDATA[github]]></category><category><![CDATA[python]]></category><category><![CDATA[markdown]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Tue, 28 Jul 2020 21:35:14 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1590595906931-81f04f0ccebb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 1"/><p/><p>Esta sera una serie de 3 Post:</p><ul><li><a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-1/">Crear nuestro README en GitHub</a></li><li><a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/">Escribir un script en python para crear nuestro README dinámico</a></li><li><a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-3/">Implementar GitHub Actions para automatizar nuestro README</a></li></ul><p> Acá te dejo una mirada de como quedo <a href="https://github.com/rafnixg">mi perfil</a>, espero me dejes una estrella :D</p><!--kg-card-begin: markdown--><p><img src="https://raw.githubusercontent.com/rafnixg/rafnixg/master/readme.md.png" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 1"/></p>
<!--kg-card-end: markdown--><h2 id="preparando-nuestro-repositorio">Preparando nuestro repositorio</h2><p>Para iniciar, debemos crear un repositorio en GitHub con nuestro nombre de usuario, en mi caso "rafnixg", tiene que ser publico y estar inicializado con un archivo README.</p><p>Ingresando a <a href="https://github.com/new">https://github.com/new</a> podemos crear nuestro repositorio</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2020/07/Screenshot_2020-07-26-Build-software-better--together.png" class="kg-image" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 1" srcset="http://localhost:2368/content/images/size/w600/2020/07/Screenshot_2020-07-26-Build-software-better--together.png 600w, http://localhost:2368/content/images/2020/07/Screenshot_2020-07-26-Build-software-better--together.png 819w" sizes="(min-width: 720px) 720px"/></figure><p>En mi caso ya me indica que tengo este repositorio creado, pero ademas se ve un mensaje que nos indica que activamos esta funcionalidad "secreta"</p><figure class="kg-card kg-image-card"><img src="http://localhost:2368/content/images/2020/07/Screenshot_2020-07-26-Build-software-better--together-1-.png" class="kg-image" alt="Actualiza tu perfil de GitHub con README y GitHub Actions - Parte 1" srcset="http://localhost:2368/content/images/size/w600/2020/07/Screenshot_2020-07-26-Build-software-better--together-1-.png 600w, http://localhost:2368/content/images/2020/07/Screenshot_2020-07-26-Build-software-better--together-1-.png 704w"/></figure><h2 id="creando-nuestro-readme">Creando nuestro README</h2><p>En esta parte del proceso tendremos que empezar clonando nuestro repositorio y editar nuestro archivo README con la información que quisiéramos mostrar, para esto usaremos el siguiente comando de Git:</p><!--kg-card-begin: markdown--><pre><code class="language-bash">$ git clone https://github.com/tu_username/tu_username.git
</code></pre>
<!--kg-card-end: markdown--><p>Luego de clonar nuestro repositorio procedemos a crear nuestro archivo README usando Markdown, yo en esta parte del proceso use varias referencias para tomar ideas y armar algo que me gustara, les dejo por acá los enlaces para que las visiten y tomen ideas.</p><ul><li><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates">https://github.com/kautukkundan/Awesome-Profile-README-templates</a></li><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></li></ul><p>Ya con una idea de lo que queremos hacer, escribimos nuestro archivo y subimos estos cambios a GitHub</p><!--kg-card-begin: markdown--><pre><code class="language-bash">$ git add README.md
$ git commit -m &quot;[IMP] Mejora de nuestro README&quot;
$ git push -u origin master
</code></pre>
<!--kg-card-end: markdown--><p>Con esto ya tendremos nuestro archivo README desplegado en nuestro perfil de GitHub.</p><p>En la segunda entrega veremos como poder obtener datos de una API como la Ghost o Dev.to y actualizar nuestro archivo README usando Python.</p><p>Siguiente de esta serie: <a href="http://localhost:2368/actualiza-tu-perfil-de-github-con-readme-y-github-actions-part-2/">Escribir un script en python para crear nuestro README dinámico</a></p><p>Gracias por leerme! los espero por mi twitter <a href="https://rafnixg@gmail.com">@rafnixg</a></p>]]></content:encoded></item><item><title><![CDATA[Crea tu blog con python usando GitHub Pages y Pelican]]></title><description><![CDATA[Cuando comencé a darle vuelta a la idea de empezar un blog de nuevo me vinieron
muchas ideas de como hacerlo a la mente, como el de usar el famoso Wordpress
[https://wordpress.org], teniendo en cuenta que el blog lo quería hacer para
hablar un poco de python y las tecnologías que iba a ir conociendo y aprendiendo
decidí mejor usar Pelican ya que esta desarrollado en Python.

¿Qué es Pelican?
Pelican [https://blog.getpelican.com/] es un generador de sitios estáticos
desarrollado en python que nos]]></description><link>https://rafnixg.dev/crea-tu-blog-con-python-usando-github-pages-y-pelican/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d6</guid><category><![CDATA[python]]></category><category><![CDATA[github]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Sat, 18 May 2019 19:06:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1522542550221-31fd19575a2d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1522542550221-31fd19575a2d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Crea tu blog con python usando GitHub Pages y Pelican"/><p>Cuando comencé a darle vuelta a la idea de empezar un blog de nuevo me vinieron muchas ideas de como hacerlo a la mente, como el de usar el famoso <a href="https://wordpress.org">Wordpress</a>, teniendo en cuenta que el blog lo quería hacer para hablar un poco de python y las tecnologías que iba a ir conociendo y aprendiendo decidí mejor usar Pelican ya que esta desarrollado en Python.</p><h2 id="-qu-es-pelican">¿Qué es Pelican?</h2><p><a href="https://blog.getpelican.com/">Pelican</a> es un generador de sitios estáticos desarrollado en python que nos permite escribir los post en archivos escritos en reStructuredText, Markdown, o AsciiDoc, y estos serán luego procesados para generar un sitio web estático como este blog, por lo que no necesitaremos una base de datos ni un servidor web que soporte un lenguaje de Backend como lo es GitHub Pages.</p><h2 id="-qu-es-github-pages">¿Qué es GitHub Pages?</h2><p><a href="https://pages.github.com/">GitHub Pages</a> es un hosting de sitios estáticos y como su pagina web lo indica, esta diseñado para hostear directamente en un repositorio de GitHub la pagina web de nuestros proyecto, paginas personales o de organizaciones, ademas de ser un servicio gratuito.</p><p>Gracias a estas características, podemos fácilmente crear nuestros sitios estáticos y subirlos a un repositorio de GitHub que debe tener la siguiente estructura <code>username.github.io</code> mas adelante indicare como crear y configurar el repositorio para que pueda servir nuestro sitio web.</p><p>GitHub recomienda el uso de <a href="https://jekyllrb.com/">Jekyll</a> para generar nuestros sitios estáticos, pero este esta hecho en Ruby, lo que no es un problema si usas Ruby pero yo al ser un #PythonLover decidí usar Pelican que esta desarrollado en Python.</p><h2 id="creando-nuestro-repositorio-en-github">Creando nuestro repositorio en GitHub</h2><p>Esta parte es la mas sencilla de post, ya que solo debemos entrar a nuestra cuenta de GitHub y crear un nuevo repositorio publico, que tenga el siguiente nombre.</p><p><code>tu_username.github.io</code>, en mi caso el repositorio donde se aloja este blog se llama <a href="https://rafnixg.github.io">rafnixg.github.io</a></p><p>Solo con esto ya tendremos nuestro Github Pages listo para comenzar a subir nuestro contenido estático.</p><h2 id="instalando-y-configurando-pelican">Instalando y configurando Pelican</h2><p>Instalar y tener Pelican funcionando es super sencillo. Pero si les quiero recomendar que toda la instalación se haga en un entorno virtual usando Pipenv, para mantener separado esta instalación de los demás paquetes de Python que tengan instalados en sus sistema, si no saben como usar Pipenv acá les dejo un post que tengo sobre este tema, <a>Entornos virtuales en Python usando Pipenv</a>.</p><p>Antes de iniciar con la instalación de pelican, debemos clonar nuestro repositorio donde esta hosteada nuestro blog, para esto solo debemos ubicarnos sonde queramos tener nuestro proyecto, en este caso yo lo haré en la raíz de mi sistema.</p><pre><code class="language-bash">$ cd ~
$ git clone https://github.com/tu_username/tu_username.github.io.git
$ cd tu_username.github.io
</code></pre><p>Luego de esto, procedemos a instalar nuestro Pelican, lo primero que debemos hacer es crear un nuevo branch llamado <code>source</code> donde ira todo nuestro código fuente y librerías, ya que para GitHub todo lo que este en la rama <code>master</code> es lo que sera servido, para nuestro interés solo debemos subir a <code>master</code> lo que pelican genera en su carpeta output, pero mas adelante nos preocuparemos de esto.</p><pre><code class="language-sh">$ git checkout -b source
$ pipenv shell
</code></pre><p>Con esto ya tendremos nuestro entorno virtual para nuestra instalación de pelican, ahora procedemos a instalar <code>pelican</code> que es nuestro generador de sitios estáticos, <code>markdown</code> que nos ayudara para escribir nuestros post usando este lenguaje y <code>ghp-import</code> que nos ayuda a publicar nuestro sitio a GitHub.</p><pre><code class="language-sh">$ pipenv install pelican markdown ghp-import

Installing pelican…
Adding pelican to Pipfile's [packages]…
✔ Installation Succeeded 
Installing markdown…
Adding markdown to Pipfile's [packages]…
✔ Installation Succeeded 
Installing ghp-import…
Adding ghp-import to Pipfile's [packages]…
✔ Installation Succeeded 
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
✔ Success! 
Updated Pipfile.lock (b0c318)!
Installing dependencies from Pipfile.lock (b0c318)…
  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 13/13 — 
</code></pre><p>Ya con esto tenemos todo listo para empezar a usar Pelican así que creemos nuestro primer blog usándolo.</p><pre><code class="language-sh">$ pelican-quickstart

Welcome to pelican-quickstart v4.0.1.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.
    
Using project associated with current virtual environment.Will save to:
/home/username/blog/pelican

&gt; What will be the title of this web site? prueba pelican
&gt; Who will be the author of this web site? rafnix guzman
&gt; What will be the default language of this web site? [es] es
&gt; Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) n
&gt; Do you want to enable article pagination? (Y/n) y
&gt; How many articles per page do you want? [10] 
&gt; What is your time zone? [Europe/Paris] America/Lima
&gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) Y **# Responder Y, esto nos ayuda mucho!**
&gt; Do you want to upload your website using FTP? (y/N) n
&gt; Do you want to upload your website using SSH? (y/N) n
&gt; Do you want to upload your website using Dropbox? (y/N) n
&gt; Do you want to upload your website using S3? (y/N) n
&gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&gt; Do you want to upload your website using GitHub Pages? (y/N) y
&gt; Is this your personal page (username.github.io)? (y/N) y
Done. Your new project is available at /home/username/blog/pelican
</code></pre><p>Si tienen alguna duda respecto a la zona horaria acá les dejo una lista con todas las <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">zonas horarias</a></p><pre><code class="language-sh">&gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n)
</code></pre><p>A esta pregunta deben responder (Y), ya que este Makefile nos ayudara a generar nuestro sitio de forma mas fácil, como podemos ver ya con esto se nos ha generado nuestro proyecto de pelican con el que podemos empezar a trabajar.</p><h2 id="escribiendo-nuestro-primer-post">Escribiendo nuestro primer post</h2><p>Vamos a crear nuestro primer post, para esto nos debemos ubicar en la carpeta <code>content</code> y con nuestro editor de texto favorito procedemos a crear un archivo llamado hola-mundo.md (si, lo se, la imaginación esta a la orden del día), este archivo luego puede ser borrado es solo para pruebas.</p><pre><code class="language-markdown">Title: Hola Mundo
Date: 2019-05-18 10:30
Modified: 2019-05-18 11:30
Category: blog
Tags: principal, otros
Slug: hola-mundo
Authors: Rafnix Guzmán
Summary: Mi primer post usando Pelican y GitHub Pages

Aca pueden empezar a escribir todo lo que quieran pueden agregar todas las sintaxis de *Markdown* que deseen.

## Título
### Subtítulo
Este es un ejemplo de texto que da entrada a una lista genérica de elementos:

- Elemento 1
- Elemento 2
- Elemento 3

Este es un ejemplo de texto que da entrada a una lista numerada:

1. Elemento 1
2. Elemento 2
3. Elemento 3

Al texto en Markdown puedes añadirle formato como **negrita** o *cursiva* de una manera muy sencilla.

Todo esto fue extraído de este [Post sobre markdown](https://markdown.es/sintaxis-markdown/)
</code></pre><h2 id="probando-nuestro-blog-en-local">Probando nuestro blog en local</h2><p>Luego de escribir y guardar su primer post, procedemos a generar un servidor de pruebas para ver nuestro resultado antes de subir nuestra web a GitHub, estando en la raíz de nuestro proyecto ejecutamos el siguiente comando.</p><pre><code class="language-sh">$ make devserver

pelican -lr /home/username/blog/pelican/content -o /home/username/blog/pelican/output -s /home/username/blog/pelican/pelicanconf.py 

-&gt; Modified: content, theme, settings. re-generating...
Done: Processed 1 article, 0 drafts, 0 pages, 0 hidden pages and 0 draft pages in 0.15 seconds.
</code></pre><p>Para entrar a nuestro servidor local de pruebas debemos ingresar a la siguiente URL <a href="http://localhost:8000">http://localhost:8000</a> con nuestro explorador favorito(espero no se IE, xD)</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="http://localhost:2368/content/images/2020/07/hola-mundo-pelican.jpg" class="kg-image" alt="Crea tu blog con python usando GitHub Pages y Pelican" srcset="http://localhost:2368/content/images/size/w600/2020/07/hola-mundo-pelican.jpg 600w, http://localhost:2368/content/images/2020/07/hola-mundo-pelican.jpg 944w" sizes="(min-width: 720px) 720px"><figcaption>Hola mundo pelican</figcaption></img></figure><h2 id="subir-nuestro-blog-a-github-pages">Subir nuestro blog a GitHub Pages</h2><p>Ya con esto procederemos a preparar todo para subir lo a github, este primer comando sube nuestro código fuente.</p><pre><code class="language-bash">$ git add -A &amp;&amp; git commit -a -m 'post hola-mundo.md' &amp;&amp; git push --all
</code></pre><p>Ahora subimos todo a la rama <code>master</code>, recuerdan que les dije que no se preocuparan por esto, es debido a que este comando hace toda esta preparación de subir todo lo que se encuentra en la carpeta <code>output</code> a nuestra rama <code>master</code></p><pre><code class="language-bash">$ make github
</code></pre><p>Acá se les preguntaran sus credenciales de github, para poder subir a su repositorio todo el sitio estático ya generado, con esto su blog estará funcionando en https://su_username.github.io/</p><p>Para el próximo post veremos como configurar un <code>Thema</code> y algunos <code>Plugins</code> para potenciar el funcionamiento de Pelican, ademas de unas configuraciones extra que nos ayudaran a tener mejor SEO.</p><p>Nos vemos en el proximo post, muchas gracias por leerme y cualquier duda, comentario, o lo que sea, lo pueden dejar por aca o por mi cuenta de Twitter <a href="https://twitter.com/rafnixg">@rafnixg</a>.</p>]]></content:encoded></item><item><title><![CDATA[🐍 Entornos virtuales en Python usando Pipenv]]></title><description><![CDATA[Una pequeña guía de como usar entornos virtuales de forma fácil en Python]]></description><link>https://rafnixg.dev/entornos-virtuales-en-python-usando-pipenv/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d2</guid><category><![CDATA[python]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Sun, 12 May 2019 00:39:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1515879218367-8466d910aaa4?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: markdown--><img src="https://images.unsplash.com/photo-1515879218367-8466d910aaa4?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="🐍 Entornos virtuales en Python usando Pipenv"/><p>Cuando iniciamos en el desarrollo con Python muchas veces no nos damos cuenta del dolor de cabeza que es mantener varios proyectos con diferentes versiones de dependencias en nuestra entorno de desarrollo local, a medida que vamos evolucionando vamos adquiriendo nuevas herramientas que mejoren nuestro flujo de trabajo, como el uso de entornos virtuales o manejadores de paquetes, entre otras, Pipenv es una de estas herramientas que nos ayudan mucho a integrar y mejorar nuestros flujos en Python, tanto es así que su eslogan por así decirlo es <em>&quot;Python Development Workflow for Humans&quot;</em>.</p>
<p>Esta herramienta básicamente nos ayuda a optimizar nuestro flujo de desarrollo unificando <em>pip</em> y <em>virtualenv</em> en una sola herramienta que funciona por linea de comandos <em>(Terminal)</em>, lo que nos daria un entorno aislado en el cual instalar nuestras dependencia y luego replicar este mismo entorno en otra maquina gracias a el archivo que se genera <strong><a href="https://github.com/pypa/pipfile">Pipfile</a></strong>, que viene a ser el sustituto del archivo que genera pip  <strong>requirements.txt</strong></p>
<h2 id="instalandopipenv">Instalando Pipenv</h2>
<p>El proceso de instalación de Pipenv es muy sencillo, en esta ocasión voy a detallar 2 formas de instalar usando lo indicado en la <a href="https://pipenv-es.readthedocs.io/es/latest/">documentación oficial</a>.</p>
<p>Si estas usando Ubuntu 16.04:</p>
<pre><code class="language-bash">$ sudo apt install software-properties-common python-software-properties
$ sudo add-apt-repository ppa:pypa/ppa
$ sudo apt update
$ sudo apt install pipenv
</code></pre>
<p>Esta otra opción es por si ya tienes instalado pip:</p>
<pre><code class="language-bash">$ pip install pipenv
</code></pre>
<p>Como acabamos de ver la instalación es muy sencilla, de igual manera si tienen algún problema con la instalación me pueden escribir.</p>
<h2 id="usandopipenv">Usando Pipenv</h2>
<p>Para efectos de este ejemplo vamos a generar una aplicación sencilla usando <code>Flask</code> y haremos el típico <em>Hola Mundo</em>, ya que este post no se trata de desarrollo de apps usando <code>Flask</code></p>
<p>Primero creamos nuestro entorno virtual para aislar nuestra aplicación:</p>
<pre><code class="language-bash">$ pipenv shell

Creating a virtualenv for this project…
Pipfile: /home/usuario/nombre_del_proyecto/Pipfile
Using /usr/bin/python3 (3.6.7) to create virtualenv…
</code></pre>
<p>Con la ejecución de este comando se crea un entorno virtual si no existe, ademas de crear 2 archivos: <code>Pipfile</code> y <code>Pipfile.lock</code>.</p>
<p>Si se instala en un proyecto preexistente Pipenv convierte tu archivo <em>requirements.txt</em> en <em>Pipfile</em>.</p>
<p>Para este proyecto se ha creado un entorno con una versión de python 3, si necesitas instalar una versión de python 2 solo debes agregar el argumento --two, también funciona para python 3 el argumento --three.</p>
<pre><code class="language-bash">$ pipenv shell --two    #Genera entorno en Python2
$ pipenv shell --three  #Genera entorno en Python3
</code></pre>
<p>Ahora procedemos a instalar los paquetes que necesitamos, en nuestro caso Flask, pero supondremos que necesitamos una versión especifica para este ejemplo usaremos la versión 1.0, para el momento de escribir este post la versión latest de Flask es la 1.0.2</p>
<pre><code class="language-bash">$ pipenv install flask==1.0

Installing flask==1.0…
Adding flask to Pipfile's [packages]…
✔ Installation Succeeded 
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
✔ Success! 
Updated Pipfile.lock (db0e09)!
Installing dependencies from Pipfile.lock (db0e09)…
  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 6/6 —
</code></pre>
<p>Con esto ya tendremos Flask instalado en nuestro entorno virtual, y procedemos a realizar nuestro desarrollo.</p>
<p>Crean un archivo llamado <code>apps.py</code> con este contenido dentro:</p>
<pre><code class="language-python">from flask import Flask
app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    return &quot;Hello World!&quot;
</code></pre>
<p>Por ultimo iniciamos nuestro servidor Flask</p>
<pre><code class="language-bash">$ FLASK_APP=apps.py flask run

 * Serving Flask app &quot;apps.py&quot;
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
</code></pre>
<p>Con esto tendremos nuestro server Flask corriendo nuestro archivo <code>apps.py</code>.</p>
<h2 id="consideracionesfinales">Consideraciones finales</h2>
<p>A lo largo de este post hemos visto como el flujo de trabajo se puede optimizar con el uso de esta herramienta, ya que no debemos generar los entornos virtuales por separado usando algo como <code>virtualenv</code> con el que como yo muchas personas no han estado conformes, también hemos visto como instalar paquetes usando pipenv tan fácil como si usáramos <code>pip</code>, queda de parte de cada quien darle una probada a esta herramienta y ver si le ayuda a optimizar su flujo de desarrollo y mantener un poco más homogéneo los ambientes de desarrollo.</p>
<p>Si deseas que siga publicando contenido sobre entornos virtuales, pip, o explique más a fondo los ficheros <code>Pipfile</code>o <code>Pipfile.lock</code>, que otros comandos puede ejecutar Pipenv, solo házmelo saber en un comentario o a través de mi cuenta twitter <a href="https://twitter.com/rafnixg">@rafnixg</a></p>
<p><strong>Referencias</strong><br>
<a href="https://pipenv-es.readthedocs.io/es/latest/">Documentación Pipenv</a></br></p>
<!--kg-card-end: markdown-->]]></content:encoded></item><item><title><![CDATA[Data schema]]></title><description><![CDATA[This is a data schema stub for Gatsby.js and is not used. It must exist for builds to function]]></description><link>https://demo.ghost.io/data-schema-page/</link><guid isPermaLink="false">Ghost__Post__5bbafb3cb7ec4135e42fce56</guid><category><![CDATA[Data schema primary]]></category><dc:creator><![CDATA[Data Schema Author]]></dc:creator><pubDate>Tue, 04 Dec 2018 13:59:14 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1532630571098-79a3d222b00d?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=a88235003c40468403f936719134519d" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1532630571098-79a3d222b00d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ&s=a88235003c40468403f936719134519d" alt="Data schema"/><p>This is a data schema stub for Gatsby.js and is not used. It must exist for builds to function</p>]]></content:encoded></item><item><title><![CDATA[Deploy usando GIT-FTP]]></title><description><![CDATA[Es muy común que cuando nos estamos iniciando en el mundo del desarrollo web y
no tenemos dinero para costearnos un buen servicio, optemos por comprar espacio
en un ‘Shared host’ o utilizar un hosting gratuito que básicamente funcional
igual.

Introducción

Cuando queremos desplegar nuestros proyectos webs en estos servicios de bajo
costo o gratuitos, nos encontramos con una limitante de que no tenemos acceso
por SSH, sino que nos colocan a disposición una cuenta FTP.

Para muchos que no han usa]]></description><link>https://rafnixg.dev/deploy-usando-git-ftp/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d5</guid><category><![CDATA[git]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Tue, 26 Jun 2018 18:57:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1554098415-788601c80aef?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1554098415-788601c80aef?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Deploy usando GIT-FTP"/><p>Es muy común que cuando nos estamos iniciando en el mundo del desarrollo web y no tenemos dinero para costearnos un buen servicio, optemos por comprar espacio en un ‘Shared host’ o utilizar un hosting gratuito que básicamente funcional igual.</p><p><strong>Introducción</strong></p><p>Cuando queremos desplegar nuestros proyectos webs en estos servicios de bajo costo o gratuitos, nos encontramos con una limitante de que no tenemos acceso por SSH, sino que nos colocan a disposición una cuenta FTP.</p><p>Para muchos que no han usado o trabajado con el control de versiones esto no es un problema, si has usado git o no sabes que es te invito a ver el curso de <a href="https://platzi.com/cursos/git-github/" rel="nofollow noopener noopener">GIT/GitHub</a> de <a href="https://medium.com/u/5281ef6d82cd">Platzi</a> para que entiendas porque debes usarlo.</p><p>Pero si queremos mantener un buen flujo de trabajo y llevar el seguimiento de nuestro proyecto usar git es tarea fundamental y a la hora del despliegue es una herramienta que nos facilita la vida, a diferencia de FTP que hace el proceso de despliegue muy tedioso y con mucha perdida de tiempo, ya que debemos saber que archivos fueron modificados para subir al servidor.</p><p><strong>Git-FTP</strong></p><p>Esa herramienta nos viene a solucionar ese problema de no subir todos los archivos o seleccionar de forma manual los archivos que deseamos subir al servidor, sino que el se encarga de revisar que archivos fueron modificados desde la ultima actualización y solo sube estos archivos.</p><p>Que belleza y que hermosura fue lo que yo pensé cuando di con esta herramienta, ya que obviamente hace que nuestro flujo de trabajo sea mas optimo que usando solamente FTP, pero no todo es así de bello existe una limitación al usar este cliente FTP y es que las modificaciones hechas directamente sobre el servidor no serán vista desde nuestra área local, por lo que aconsejo mantener esto en cuenta.</p><p><strong>Instalacion de Git-FTP</strong></p><p>La instalación es muy sencilla para los que usamos GNU/Linux yo en especial uso Debian es muy sencillo de instalar usando la terminal, para los que usen otro sistema operativo acá les dejo el <a href="https://github.com/git-ftp/git-ftp/blob/master/INSTALL.md" rel="nofollow noopener noopener">Manual de Instalación Oficial</a> donde encontraran la instalación para los siguientes Sistemas operativos:</p><ul><li>Linux/Unix usando make</li><li>Debian, Ubuntu y otros usando apt</li><li>ArchLinux</li><li>Mac OS X</li><li>Windows</li></ul><p>Para los que usamos Debian o Ubuntu solo debemos teclear esto en la terminal</p><p><code>sudo apt-get install git-ftp</code></p><p>Con esto ya tendríamos Git-FTP instalado</p><p><strong>Configuración</strong></p><p>La configuración es muy sencilla desde nuestro terminal usamos los siguientes comandos:</p><p><code>git config git-ftp.url ftp.example.net</code></p><p><code>git config git-ftp.user ftp-user</code></p><p><code>git config git-ftp.password secr3t</code></p><p>Ya con esto tendríamos configurada la conexión a nuestro servidor por FTP, solo resta ubicarnos en la carpeta de nuestro proyecto y dependiendo las siguientes 2 opciones ejecutar el comando que sea conveniente:</p><ul><li>Subir todos los archivos (inicializacion)<br> <code>git ftp init</code></br></li><li>Indicar que los archivos ya se encuentran en el servidor.<br> <code>git ftp catchup</code></br></li></ul><p><strong>Haciendo Deploy</strong></p><p>Para hacer deploy seguimos nuestro flujo de trabajo normal usando git, en el momento que necesitemos subir los archivos modificados al servidor solo debemos ejecutar este comando en la terminal:</p><p><code>git ftp push</code></p><p>Con esto ya tendremos nuestros archivos en el servidor.</p><p><strong>Recomendación</strong></p><blockquote>Para los que no usan aún git visitar el curso de Git/GitHub que hay en la plataforma <a href="https://medium.com/u/5281ef6d82cd">Platzi</a>.</blockquote><blockquote>Mantener siempre el mismo flujo de trabajo y no modificar archivos directamente al servidor.</blockquote><blockquote>Leer la documentación Oficial de Git-FTP - <a href="https://git-ftp.github.io/" rel="nofollow noopener noopener noopener">Pagina Oficial de Git-FTP</a></blockquote>]]></content:encoded></item><item><title><![CDATA[Ejecutar Código JavaScript en Sublime Text]]></title><description><![CDATA[Cuando estamos iniciando en el desarrollo con JavaScript uno de los flujos de
trabajos menos óptimos para no decir los mas fastidiosos, son tener que escribir
el código en nuestro editor de código favorito y tener que ir a la consola del
explorador a probarlo.

Para resolver este problema existen muchos camino, el que yo propongo aquí es el
que mas se adapto a mis necesidades y espero que pueda ayudar en las suyas, para
todos esos que usan Sublime Text y mantiene este flujo de trabajo de crear
c]]></description><link>https://rafnixg.dev/ejecutar-codigo-javascript-en-sublime-text/</link><guid isPermaLink="false">Ghost__Post__5f330dd9c6b819e6351398d4</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Rafnix Guzmán]]></dc:creator><pubDate>Wed, 28 Jun 2017 18:48:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1572621403925-33e05716ad8d?ixlib=rb-1.2.1&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=2000&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ" medium="image"/><content:encoded><![CDATA[<img src="https://images.unsplash.com/photo-1572621403925-33e05716ad8d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ" alt="Ejecutar Código JavaScript en Sublime Text"/><p>Cuando estamos iniciando en el desarrollo con JavaScript uno de los flujos de trabajos menos óptimos para no decir los mas fastidiosos, son tener que escribir el código en nuestro editor de código favorito y tener que ir a la consola del explorador a probarlo.</p><p>Para resolver este problema existen muchos camino, el que yo propongo aquí es el que mas se adapto a mis necesidades y espero que pueda ayudar en las suyas, para todos esos que usan <em>Sublime Text</em> y mantiene este flujo de trabajo de crear código en sublime y luego pasarlo a un explorador y depurar en la consola del explorador doy este pequeño pero para mi poderoso tip.</p><p>Inicialmente debemos tener instalado <em>Sublime Text</em>, es muy sencillo de instalar y en su sitio web existe mucha documentación al respecto, y lo segundo que tendremos que tener instalado es <em>Node.js</em>,</p><p>Si aun no tienes instalado <em>Node.js</em> acá te dejo la documentación oficial donde encontrás la guiá de como instalarlo en cualquier sistema operativo que uses, <a href="https://nodejs.org/es/download/package-manager/" rel="noopener">Manual de Instalación</a></p><h4 id="configurando-sublime">Configurando Sublime</h4><p>Luego de tener Sublime Text y Node.js instalados y funcionando, vamos a proceder a hacer una pequeña configuración en sublime Text, para esto debemos ingresar en <strong>“Tools &gt; Build System &gt; New Build System”</strong>, se abrirá un documento nuevo con el siguiente contenido:</p><blockquote>{<br> “cmd”: [“make”]<br>}</br></br></blockquote><p>Este contenido debe ser sustituido por el siguiente:</p><blockquote>{<br> “cmd”: [“node”, “$file”],<br> “selector”: “source.js”<br>}</br></br></br></blockquote><p>Hecho esto procedemos a guardar el archivo en la ruta sugerida por Sublime Text, para poder probar que esta funcionando solo debemos crear un nuevo archivo JS con el código JavaScript que deseen, recomiendo solo a modo de prueba el siguiente:</p><blockquote>console.log(“JavaScript funcionando desde Sublime Text”)</blockquote><p>Guardan el archivo nuevo con el nombre que deseen en mi caso <strong>“prueba.js”</strong> y para poder ejecutarlo deben ir a <strong>“Tools &gt; Build”</strong> o ejecutando la siguiente combinación de teclas <strong>“Control + B”</strong>.</p><h4 id="recomendaciones">Recomendaciones</h4><p>Para los que se están iniciando en el mundo de JavaScript los recomiendo leer un poco sobre Node.js y lo potente que puede llegar a ser, ya que en este post no se aprecia la potencia de este.</p><p>Instalar Snippets y verificadores de código para Sublime Text, para aumentar su productividad y saber donde puedan tener posibles errores.</p>]]></content:encoded></item></channel></rss>